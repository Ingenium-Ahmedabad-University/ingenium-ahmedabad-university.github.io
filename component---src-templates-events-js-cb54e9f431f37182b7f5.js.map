{"version":3,"sources":["webpack:///./src/components/events.jsx","webpack:///./src/templates/events.js"],"names":["Tooltip","children","class","Icons","eventUrl","className","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","stroke-linecap","stroke-linejoin","stroke-width","id","onClick","tooltipText","document","querySelector","navigator","clipboard","writeText","innerHTML","setTimeout","copyToClipboard","Events","dAndT","eventTitle","desc","speaker","desig","sImg","pUrl","to","src","alt","EventsPage","event","data","eventsDataJson","dateAndTime","eventName","description","speakerName","designation","speakerImg","posterUrl","SEO"],"mappings":"wIAcA,IAAMA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAAKC,MAAM,eACT,0BAAMA,MAAM,wGAAZ,qBAGCD,IAICE,EAAQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,OACE,yBAAKC,UAAU,+DACb,yBAAKA,UAAU,yCACb,yBACEC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPJ,UAAU,gBAEV,0BACEK,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,iIAGN,uBAAGR,UAAU,QAAb,SAGF,kBAAC,EAAD,KACE,yBAAKA,UAAU,4BACb,yBACEC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPJ,UAAU,gBAEV,0BACES,iBAAe,QACfC,kBAAgB,QAChBC,eAAa,IACbH,EAAE,oEAGN,4BACEI,GAAG,eACHZ,UAAU,yDACVa,QAAS,YA5DrB,SAAyBd,GACvB,IAAMe,EAAcC,SAASC,cAAc,iBAE3CC,UAAUC,UAAUC,UAAUpB,GAC9Be,EAAYM,UAAY,SAExBC,YAAW,WACTP,EAAYM,UAAY,sBACvB,KAqDSE,CAAgBvB,KAJpB,aAoGKwB,EA3DA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,MAAOC,EAA5C,EAA4CA,KAAMC,EAAlD,EAAkDA,KAAlD,OACb,6BAASlB,GAAG,eACV,yBAAKZ,UAAU,sDACb,yBAAKA,UAAU,wBACb,kBAAC,OAAD,CAAM+B,GAAG,IAAI/B,UAAU,QACrB,yBACEC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPJ,UAAU,gBAEV,0BACEK,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,iEAZR,YAkBF,yBAAKR,UAAU,gEACb,yBAAKA,UAAU,8BAA8BwB,GAC7C,kBAAC,EAAD,CAAOzB,SAAS,6BAElB,yBAAKC,UAAU,QACb,wBAAIA,UAAU,8FACXyB,GAEH,uBAAGzB,UAAU,8BAA8B0B,IAE7C,yBAAK1B,UAAU,qBACb,yBAAKA,UAAU,0BACb,yBAAKgC,IAAKH,EAAMI,IAAI,GAAGjC,UAAU,kBAEnC,yBAAKA,UAAU,qBACb,6BACE,0BAAMA,UAAU,gCAAgC2B,GAChD,6BACA,0BAAM3B,UAAU,sBAAsB4B,MAI5C,yBAAK5B,UAAU,SACb,wBAAIA,UAAU,+BACd,yBAAKgC,IAAKF,EAAMG,IAAI,GAAGjC,UAAU,kCACjC,wBAAIA,UAAU,mC,oCChGPkC,UA/BI,SAAC,GAAc,IAC1BC,EADyB,EAAXC,KACDC,eAEbb,EAAQW,EAAMG,YACdb,EAAaU,EAAMI,UACnBb,EAAOS,EAAMK,YACbb,EAAUQ,EAAMM,YAChBb,EAAQO,EAAMO,YACdb,EAAOM,EAAMQ,WACbb,EAAOK,EAAMS,UAEnB,OACE,6BACE,kBAACC,EAAA,EAAD,MACA,yBAAK7C,UAAU,sCACb,kBAAC,EAAD,CACEwB,MAAOA,EACPC,WAAYA,EACZC,KAAMA,EACNC,QAASA,EACTC,MAAOA,EACPC,KAAMA,EACNC,KAAMA,IAGR,kBAAC,IAAD,MACA,kBAAC,IAAD","file":"component---src-templates-events-js-cb54e9f431f37182b7f5.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nfunction copyToClipboard(eventUrl) {\n  const tooltipText = document.querySelector('.tooltip-text');\n\n  navigator.clipboard.writeText(eventUrl);\n  tooltipText.innerHTML = 'Copied';\n\n  setTimeout(() => {\n    tooltipText.innerHTML = 'Copy to clipborad';\n  }, 3000);\n}\n\nconst Tooltip = ({ children }) => (\n  <div class='has-tooltip'>\n    <span class='tooltip tooltip-text rounded shadow-lg px-3 py-2 bg-base-light text-white text-sm font-normal -mt-10'>\n      Copy to clipboard\n    </span>\n    {children}\n  </div>\n);\n\nconst Icons = ({ eventUrl }) => {\n  return (\n    <div className='flex my-3 justify-start sm:justify-end font-bold text-white'>\n      <div className='flex items-center hover:text-gray-400'>\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          fill='none'\n          viewBox='0 0 24 24'\n          stroke='currentColor'\n          className='h-5 w-5 mr-2'\n        >\n          <path\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            strokeWidth={2}\n            d='M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z'\n          />\n        </svg>\n        <p className='mr-3'>Like</p>\n      </div>\n\n      <Tooltip>\n        <div className='flex hover:text-gray-400'>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            fill='none'\n            viewBox='0 0 24 24'\n            stroke='currentColor'\n            className='h-5 w-5 mr-2'\n          >\n            <path\n              stroke-linecap='round'\n              stroke-linejoin='round'\n              stroke-width='2'\n              d='M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12'\n            />\n          </svg>\n          <button\n            id='share-button'\n            className='font-bold focus:outline-none foucs-within:outline-none'\n            onClick={() => {\n              copyToClipboard(eventUrl);\n            }}\n          >\n            Share\n          </button>\n        </div>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Suggestions = ({\n  eventName,\n  speakerName,\n  speakerDetails,\n  speakerImg,\n}) => (\n  <div className='border-2 border-secondary p-5'>\n    <div className='flex justify-between mb-5'>\n      <div className='text-2xl font-bold text-white'>{eventName}</div>\n      <Icons eventUrl='https://www.google.com/' />\n    </div>\n    <div className='flex align-middle'>\n      <div className='rounded-full w-16 mr-5'>\n        <img src={speakerImg} alt='' className='rounded-full' />\n      </div>\n      <div className='flex items-center text-white text-l font-bold'>\n        <div>\n          <span>{speakerName}</span>\n          <br />\n          <span>{speakerDetails}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst Events = ({ dAndT, eventTitle, desc, speaker, desig, sImg, pUrl }) => (\n  <section id='events-page'>\n    <div className='container md:max-w-4/5 xl:max-w-7/10 mx-auto py-28'>\n      <div className='flex my-5 text-white'>\n        <Link to='/' className='flex'>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            fill='none'\n            viewBox='0 0 24 24'\n            stroke='currentColor'\n            className='h-6 w-6 mr-2'\n          >\n            <path\n              strokeLinecap='round'\n              strokeLinejoin='round'\n              strokeWidth={2}\n              d='M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z'\n            />\n          </svg>\n          Go Back\n        </Link>\n      </div>\n      <div className='grid grid-cols-1 sm:grid-cols-2 justify-between mb-5 sm:mb-8'>\n        <div className='text-xl my-2 text-gray-400'>{dAndT}</div>\n        <Icons eventUrl='https://www.google.com/' />\n      </div>\n      <div className='mb-6'>\n        <h1 className='text-4xl sm:text-6xl py-3 font-bold bg-gradient-to-br from-red-500 to-indigo-400 social-bg'>\n          {eventTitle}\n        </h1>\n        <p className='text-gray-400 text-lg py-3'>{desc}</p>\n      </div>\n      <div className='flex align-middle'>\n        <div className='rounded-full w-40 mr-5'>\n          <img src={sImg} alt='' className='rounded-full' />\n        </div>\n        <div className='flex items-center'>\n          <div>\n            <span className='text-white text-lg font-bold'>{speaker}</span>\n            <br />\n            <span className='text-lg text-white'>{desig}</span>\n          </div>\n        </div>\n      </div>\n      <div className='my-10'>\n        <hr className='border-t border-base-light' />\n        <img src={pUrl} alt='' className='w-full max-w-2xl my-5 mx-auto' />\n        <hr className='border-t border-base-light' />\n      </div>\n      {/* <Suggestions\n                eventName=\"Paying down technical debt at GitHub\"\n                speakerName=\"Keith Ballinger\"\n                speakerDetails=\"SVP, Engineering, GitHub\"\n                speakerImg=\"https://githubuniverse.com/assets/img/speakers/Keith_Ballinger_Headshot.jpg\"\n            /> */}\n    </div>\n  </section>\n);\n\nexport default Events;\n/*\nexport const eventsDataQuery = graphql`\nquery EventsDataByPath($event: String!) {\n    eventsDataJson(event: { eq: $event }) {\n        \n        dateAndTime\n        eventName\n        description\n        speakerName\n        designation\n        speakerImg\n        posterUrl\n    }\n}\n`\n*/\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport Events from '../components/events';\nimport Footer from '../components/footer';\nimport Header from '../components/header';\nimport SEO from '../components/SEO';\n\nexport const eventsDataQuery = graphql`\n  query EventsDataByPath($event: String!) {\n    eventsDataJson(event: { eq: $event }) {\n      dateAndTime\n      eventName\n      description\n      speakerName\n      designation\n      speakerImg\n      posterUrl\n    }\n  }\n`;\n\nconst EventsPage = ({ data }) => {\n  const event = data.eventsDataJson;\n\n  const dAndT = event.dateAndTime;\n  const eventTitle = event.eventName;\n  const desc = event.description;\n  const speaker = event.speakerName;\n  const desig = event.designation;\n  const sImg = event.speakerImg;\n  const pUrl = event.posterUrl;\n\n  return (\n    <div>\n      <SEO />\n      <div className='base px-3 md:px-5 lg:px-10 bg-base'>\n        <Events\n          dAndT={dAndT}\n          eventTitle={eventTitle}\n          desc={desc}\n          speaker={speaker}\n          desig={desig}\n          sImg={sImg}\n          pUrl={pUrl}\n        />\n        {/* <Events {...event}/> */}\n        <Footer />\n        <Header />\n      </div>\n    </div>\n  );\n};\nexport default EventsPage;\n"],"sourceRoot":""}