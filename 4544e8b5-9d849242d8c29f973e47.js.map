{"version":3,"sources":["webpack:///./node_modules/matter-js/build/matter.js"],"names":["factory","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","global","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","dx","dy","pointX","pointY","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Collision","_supports","_overlapAB","_overlapBA","Pair","overlap","axis","collided","parentA","parentB","depth","normal","tangent","penetration","supports","collides","_overlapAxes","minOverlap","table","minAxis","minAxisX","minAxisY","supportsB","_findSupports","supportCount","supportsA","verticesA","verticesB","overlapAB","overlapBA","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","axisX","axisY","minA","minB","maxA","maxB","_projectToAxis","projection","direction","vertexC","distance","bodyAPositionX","bodyAPositionY","normalX","normalY","nearestDistance","Contact","timestamp","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","parentAVerticesLength","support","contactId","contact","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normalVelocity","relativeVelocity","difference","massTotal","resistanceTotal","zero","postSolveAll","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","partA","partB","pav","pbv","da","db","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","Detector","setBodies","detector","collisions","bodiesLength","canCollide","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsBStart","filterA","filterB","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","pattern","exec","major","minor","patch","isRange","operator","prerelease","Render","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","engine","canvas","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","showBroadphase","setPixelRatio","appendChild","run","loop","time","_updateTiming","world","stats","stop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","startTime","currentBackground","_applyBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","sections","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","rateMean","fps","gap","round","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","start","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","positionIterations","velocityIterations","constraintIterations","gravity","grid","buckets","broadphase","metrics","_bodiesApplyGravity","_bodiesUpdate","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","pairsLength","contactShare","positionDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contactsLength","contactVertex","impulseX","impulseY","maxFriction","timeScaleSquared","restingThresh","frictionNormalMultiplier","restingThreshTangent","NumberMaxValue","bodyAVelocity","bodyBVelocity","tangentX","tangentY","inverseMassTotal","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairIndex","pairsList","pairsListLength","pairsTable","collisionsLength","removePairIndex","Matter","Composites","Grid","MouseConstraint","Query","Runner","SAT","Svg","World","before","after","stack","columns","rows","columnGap","rowGap","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","col","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","bucketWidth","bucketHeight","forceUpdate","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","mouseConstraint","_triggerEvents","mouseEvents","partsAStart","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_frameTimeout","clearTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","timePrev","timeScalePrev","isFixed","deltaMin","deltaMax","tick","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag"],"mappings":"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","file":"4544e8b5-9d849242d8c29f973e47.js","sourcesContent":["/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"Matter\", [], factory);else if (typeof exports === 'object') exports[\"Matter\"] = factory();else root[\"Matter\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 21);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Common` module contains utility functions that are common to all modules.\n      *\n      * @class Common\n      */\n      var Common = {};\n      module.exports = Common;\n\n      (function () {\n        Common._nextId = 0;\n        Common._seed = 0;\n        Common._nowStartTime = +new Date();\n        Common._warnedOnce = {};\n        Common._decomp = null;\n        /**\n         * Extends the object in the first argument using the object in the second argument.\n         * @method extend\n         * @param {} obj\n         * @param {boolean} deep\n         * @return {} obj extended\n         */\n\n        Common.extend = function (obj, deep) {\n          var argsStart, args, deepClone;\n\n          if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n          } else {\n            argsStart = 1;\n            deepClone = true;\n          }\n\n          for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n              for (var prop in source) {\n                if (deepClone && source[prop] && source[prop].constructor === Object) {\n                  if (!obj[prop] || obj[prop].constructor === Object) {\n                    obj[prop] = obj[prop] || {};\n                    Common.extend(obj[prop], deepClone, source[prop]);\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                } else {\n                  obj[prop] = source[prop];\n                }\n              }\n            }\n          }\n\n          return obj;\n        };\n        /**\n         * Creates a new clone of the object, if deep is true references will also be cloned.\n         * @method clone\n         * @param {} obj\n         * @param {bool} deep\n         * @return {} obj cloned\n         */\n\n\n        Common.clone = function (obj, deep) {\n          return Common.extend({}, deep, obj);\n        };\n        /**\n         * Returns the list of keys for the given object.\n         * @method keys\n         * @param {} obj\n         * @return {string[]} keys\n         */\n\n\n        Common.keys = function (obj) {\n          if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n          var keys = [];\n\n          for (var key in obj) {\n            keys.push(key);\n          }\n\n          return keys;\n        };\n        /**\n         * Returns the list of values for the given object.\n         * @method values\n         * @param {} obj\n         * @return {array} Array of the objects property values\n         */\n\n\n        Common.values = function (obj) {\n          var values = [];\n\n          if (Object.keys) {\n            var keys = Object.keys(obj);\n\n            for (var i = 0; i < keys.length; i++) {\n              values.push(obj[keys[i]]);\n            }\n\n            return values;\n          } // avoid hasOwnProperty for performance\n\n\n          for (var key in obj) {\n            values.push(obj[key]);\n          }\n\n          return values;\n        };\n        /**\n         * Gets a value from `base` relative to the `path` string.\n         * @method get\n         * @param {} obj The base object\n         * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n         * @param {number} [begin] Path slice begin\n         * @param {number} [end] Path slice end\n         * @return {} The object at the given path\n         */\n\n\n        Common.get = function (obj, path, begin, end) {\n          path = path.split('.').slice(begin, end);\n\n          for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n          }\n\n          return obj;\n        };\n        /**\n         * Sets a value on `base` relative to the given `path` string.\n         * @method set\n         * @param {} obj The base object\n         * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n         * @param {} val The value to set\n         * @param {number} [begin] Path slice begin\n         * @param {number} [end] Path slice end\n         * @return {} Pass through `val` for chaining\n         */\n\n\n        Common.set = function (obj, path, val, begin, end) {\n          var parts = path.split('.').slice(begin, end);\n          Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n          return val;\n        };\n        /**\n         * Shuffles the given array in-place.\n         * The function uses a seeded random generator.\n         * @method shuffle\n         * @param {array} array\n         * @return {array} array shuffled randomly\n         */\n\n\n        Common.shuffle = function (array) {\n          for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n          }\n\n          return array;\n        };\n        /**\n         * Randomly chooses a value from a list with equal probability.\n         * The function uses a seeded random generator.\n         * @method choose\n         * @param {array} choices\n         * @return {object} A random choice object from the array\n         */\n\n\n        Common.choose = function (choices) {\n          return choices[Math.floor(Common.random() * choices.length)];\n        };\n        /**\n         * Returns true if the object is a HTMLElement, otherwise false.\n         * @method isElement\n         * @param {object} obj\n         * @return {boolean} True if the object is a HTMLElement, otherwise false\n         */\n\n\n        Common.isElement = function (obj) {\n          if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n          }\n\n          return !!(obj && obj.nodeType && obj.nodeName);\n        };\n        /**\n         * Returns true if the object is an array.\n         * @method isArray\n         * @param {object} obj\n         * @return {boolean} True if the object is an array, otherwise false\n         */\n\n\n        Common.isArray = function (obj) {\n          return Object.prototype.toString.call(obj) === '[object Array]';\n        };\n        /**\n         * Returns true if the object is a function.\n         * @method isFunction\n         * @param {object} obj\n         * @return {boolean} True if the object is a function, otherwise false\n         */\n\n\n        Common.isFunction = function (obj) {\n          return typeof obj === \"function\";\n        };\n        /**\n         * Returns true if the object is a plain object.\n         * @method isPlainObject\n         * @param {object} obj\n         * @return {boolean} True if the object is a plain object, otherwise false\n         */\n\n\n        Common.isPlainObject = function (obj) {\n          return typeof obj === 'object' && obj.constructor === Object;\n        };\n        /**\n         * Returns true if the object is a string.\n         * @method isString\n         * @param {object} obj\n         * @return {boolean} True if the object is a string, otherwise false\n         */\n\n\n        Common.isString = function (obj) {\n          return toString.call(obj) === '[object String]';\n        };\n        /**\n         * Returns the given value clamped between a minimum and maximum value.\n         * @method clamp\n         * @param {number} value\n         * @param {number} min\n         * @param {number} max\n         * @return {number} The value clamped between min and max inclusive\n         */\n\n\n        Common.clamp = function (value, min, max) {\n          if (value < min) return min;\n          if (value > max) return max;\n          return value;\n        };\n        /**\n         * Returns the sign of the given value.\n         * @method sign\n         * @param {number} value\n         * @return {number} -1 if negative, +1 if 0 or positive\n         */\n\n\n        Common.sign = function (value) {\n          return value < 0 ? -1 : 1;\n        };\n        /**\n         * Returns the current timestamp since the time origin (e.g. from page load).\n         * The result is in milliseconds and will use high-resolution timing if available.\n         * @method now\n         * @return {number} the current timestamp in milliseconds\n         */\n\n\n        Common.now = function () {\n          if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n              return window.performance.now();\n            } else if (window.performance.webkitNow) {\n              return window.performance.webkitNow();\n            }\n          }\n\n          if (Date.now) {\n            return Date.now();\n          }\n\n          return new Date() - Common._nowStartTime;\n        };\n        /**\n         * Returns a random value between a minimum and a maximum value inclusive.\n         * The function uses a seeded random generator.\n         * @method random\n         * @param {number} min\n         * @param {number} max\n         * @return {number} A random number between min and max inclusive\n         */\n\n\n        Common.random = function (min, max) {\n          min = typeof min !== \"undefined\" ? min : 0;\n          max = typeof max !== \"undefined\" ? max : 1;\n          return min + _seededRandom() * (max - min);\n        };\n\n        var _seededRandom = function _seededRandom() {\n          // https://en.wikipedia.org/wiki/Linear_congruential_generator\n          Common._seed = (Common._seed * 9301 + 49297) % 233280;\n          return Common._seed / 233280;\n        };\n        /**\n         * Converts a CSS hex colour string into an integer.\n         * @method colorToNumber\n         * @param {string} colorString\n         * @return {number} An integer representing the CSS hex string\n         */\n\n\n        Common.colorToNumber = function (colorString) {\n          colorString = colorString.replace('#', '');\n\n          if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n          }\n\n          return parseInt(colorString, 16);\n        };\n        /**\n         * The console logging level to use, where each level includes all levels above and excludes the levels below.\n         * The default level is 'debug' which shows all console messages.  \n         *\n         * Possible level values are:\n         * - 0 = None\n         * - 1 = Debug\n         * - 2 = Info\n         * - 3 = Warn\n         * - 4 = Error\n         * @property Common.logLevel\n         * @type {Number}\n         * @default 1\n         */\n\n\n        Common.logLevel = 1;\n        /**\n         * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method log\n         * @param ...objs {} The objects to log.\n         */\n\n        Common.log = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method info\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.info = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method warn\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.warn = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Uses `Common.warn` to log the given message one time only.\n         * @method warnOnce\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.warnOnce = function () {\n          var message = Array.prototype.slice.call(arguments).join(' ');\n\n          if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n          }\n        };\n        /**\n         * Shows a deprecated console warning when the function on the given object is called.\n         * The target function will be replaced with a new function that first shows the warning\n         * and then calls the original function.\n         * @method deprecated\n         * @param {object} obj The object or module\n         * @param {string} name The property name of the function on obj\n         * @param {string} warning The one-time message to show if the function is called\n         */\n\n\n        Common.deprecated = function (obj, prop, warning) {\n          obj[prop] = Common.chain(function () {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n          }, obj[prop]);\n        };\n        /**\n         * Returns the next unique sequential ID.\n         * @method nextId\n         * @return {Number} Unique sequential ID\n         */\n\n\n        Common.nextId = function () {\n          return Common._nextId++;\n        };\n        /**\n         * A cross browser compatible indexOf implementation.\n         * @method indexOf\n         * @param {array} haystack\n         * @param {object} needle\n         * @return {number} The position of needle in haystack, otherwise -1.\n         */\n\n\n        Common.indexOf = function (haystack, needle) {\n          if (haystack.indexOf) return haystack.indexOf(needle);\n\n          for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle) return i;\n          }\n\n          return -1;\n        };\n        /**\n         * A cross browser compatible array map implementation.\n         * @method map\n         * @param {array} list\n         * @param {function} func\n         * @return {array} Values from list transformed by func.\n         */\n\n\n        Common.map = function (list, func) {\n          if (list.map) {\n            return list.map(func);\n          }\n\n          var mapped = [];\n\n          for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n          }\n\n          return mapped;\n        };\n        /**\n         * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n         * Circular dependencies are allowed.\n         * @method topologicalSort\n         * @param {object} graph\n         * @return {array} Partially ordered set of vertices in topological order.\n         */\n\n\n        Common.topologicalSort = function (graph) {\n          // https://github.com/mgechev/javascript-algorithms\n          // Copyright (c) Minko Gechev (MIT license)\n          // Modifications: tidy formatting and naming\n          var result = [],\n              visited = [],\n              temp = [];\n\n          for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n              Common._topologicalSort(node, visited, temp, graph, result);\n            }\n          }\n\n          return result;\n        };\n\n        Common._topologicalSort = function (node, visited, temp, graph, result) {\n          var neighbors = graph[node] || [];\n          temp[node] = true;\n\n          for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n              // skip circular dependencies\n              continue;\n            }\n\n            if (!visited[neighbor]) {\n              Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n          }\n\n          temp[node] = false;\n          visited[node] = true;\n          result.push(node);\n        };\n        /**\n         * Takes _n_ functions as arguments and returns a new function that calls them in order.\n         * The arguments applied when calling the new function will also be applied to every function passed.\n         * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n         * Therefore if a passed function does not return a value, the previously returned value is maintained.\n         * After all passed functions have been called the new function returns the last returned value (if any).\n         * If any of the passed functions are a chain, then the chain will be flattened.\n         * @method chain\n         * @param ...funcs {function} The functions to chain.\n         * @return {function} A new function that calls the passed functions in order.\n         */\n\n\n        Common.chain = function () {\n          var funcs = [];\n\n          for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n              // flatten already chained functions\n              funcs.push.apply(funcs, func._chained);\n            } else {\n              funcs.push(func);\n            }\n          }\n\n          var chain = function chain() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n              args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n              var result = funcs[i].apply(lastResult, args);\n\n              if (typeof result !== 'undefined') {\n                lastResult = result;\n              }\n            }\n\n            return lastResult;\n          };\n\n          chain._chained = funcs;\n          return chain;\n        };\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `base`.\n         * See also docs for `Common.chain`.\n         * @method chainPathBefore\n         * @param {} base The base object\n         * @param {string} path The path relative to `base`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Common.chainPathBefore = function (base, path, func) {\n          return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n        };\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `base`.\n         * See also docs for `Common.chain`.\n         * @method chainPathAfter\n         * @param {} base The base object\n         * @param {string} path The path relative to `base`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Common.chainPathAfter = function (base, path, func) {\n          return Common.set(base, path, Common.chain(Common.get(base, path), func));\n        };\n        /**\n         * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n         * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n         * @method setDecomp\n         * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n         */\n\n\n        Common.setDecomp = function (decomp) {\n          Common._decomp = decomp;\n        };\n        /**\n         * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n         * otherwise returns the global `decomp` if set.\n         * @method getDecomp\n         * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n         */\n\n\n        Common.getDecomp = function () {\n          // get user provided decomp if set\n          var decomp = Common._decomp;\n\n          try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n              decomp = window.decomp;\n            } // otherwise from node global\n\n\n            if (!decomp && typeof global !== 'undefined') {\n              decomp = global.decomp;\n            }\n          } catch (e) {\n            // decomp not available\n            decomp = null;\n          }\n\n          return decomp;\n        };\n      })();\n      /***/\n\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n      var Bounds = {};\n      module.exports = Bounds;\n\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n\n\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n\n\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n\n\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n\n\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n\n\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n              deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n      // TODO: consider params for reusing vector objects\n      var Vector = {};\n      module.exports = Vector;\n\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n\n\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n\n\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n\n\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n\n\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n\n\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n\n\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n\n\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n\n\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n\n\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n\n\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n\n\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n\n\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n\n\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n\n\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n\n\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n\n\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n\n\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n      /***/\n\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n      var Vertices = {};\n      module.exports = Vertices;\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n            vertices.push(vertex);\n          }\n\n          return vertices;\n        };\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n              points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n\n\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n              centre = {\n            x: 0,\n            y: 0\n          },\n              cross,\n              temp,\n              j;\n\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n\n          return Vector.div(centre, 6 * area);\n        };\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n\n\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n\n          return Vector.div(average, vertices.length);\n        };\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n\n\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n              j = vertices.length - 1;\n\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n\n\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n              denominator = 0,\n              v = vertices,\n              cross,\n              j; // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n\n          return mass / 6 * (numerator / denominator);\n        };\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n\n\n        Vertices.translate = function (vertices, vector, scalar) {\n          scalar = typeof scalar !== 'undefined' ? scalar : 1;\n          var verticesLength = vertices.length,\n              translateX = vector.x * scalar,\n              translateY = vector.y * scalar,\n              i;\n\n          for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n\n\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle),\n              pointX = point.x,\n              pointY = point.y,\n              verticesLength = vertices.length,\n              vertex,\n              dx,\n              dy,\n              i;\n\n          for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n          }\n\n          return vertices;\n        };\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n\n\n        Vertices.contains = function (vertices, point) {\n          var pointX = point.x,\n              pointY = point.y,\n              verticesLength = vertices.length,\n              vertex = vertices[verticesLength - 1],\n              nextVertex;\n\n          for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n              return false;\n            }\n\n            vertex = nextVertex;\n          }\n\n          return true;\n        };\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n\n\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n\n\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          } // quality defaults to -1, which is auto\n\n\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax); // use an even value for precision, more likely to reduce axes by using symmetry\n\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n\n          return newVertices;\n        };\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n\n\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n          var flag = 0,\n              n = vertices.length,\n              i,\n              j,\n              k,\n              z;\n          if (n < 3) return null;\n\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n\n            if (flag === 3) {\n              return false;\n            }\n          }\n\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n\n\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n          var upper = [],\n              lower = [],\n              vertex,\n              i; // sort vertices on x-axis (y-axis for ties)\n\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          }); // build lower hull\n\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n\n            lower.push(vertex);\n          } // build upper hull\n\n\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n\n            upper.push(vertex);\n          } // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n\n\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n      /***/\n\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n      var Events = {};\n      module.exports = Events;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n              name;\n\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n\n          return callback;\n        };\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n\n\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          } // handle Events.off(object, callback)\n\n\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n\n          var names = eventNames.split(' ');\n\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n\n\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n          var events = object.events;\n\n          if (events && Common.keys(events).length > 0) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = events[name];\n\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n      *\n      * They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n      * A composite could contain anything from a single body all the way up to a whole world.\n      * \n      * When making any changes to composites, use the included functions rather than changing their properties directly.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n      var Composite = {};\n      module.exports = Composite;\n\n      var Events = __webpack_require__(4);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      var Body = __webpack_require__(6);\n\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n              allBodies: null,\n              allConstraints: null,\n              allComposites: null\n            }\n          }, options);\n        };\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @private\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n\n\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n\n          if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n          }\n\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n        /**\n         * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n         * @return {composite} The original composite with the objects added\n         */\n\n\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {object|array} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n\n\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n\n\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n\n\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n\n\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n\n\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n\n\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n\n\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n\n\n        Composite.allBodies = function (composite) {\n          if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n          }\n\n          var bodies = [].concat(composite.bodies);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n          }\n\n          if (composite.cache) {\n            composite.cache.allBodies = bodies;\n          }\n\n          return bodies;\n        };\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n\n\n        Composite.allConstraints = function (composite) {\n          if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n          }\n\n          var constraints = [].concat(composite.constraints);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n          }\n\n          if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n          }\n\n          return constraints;\n        };\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n\n\n        Composite.allComposites = function (composite) {\n          if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n          }\n\n          var composites = [].concat(composite.composites);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n          }\n\n          if (composite.cache) {\n            composite.cache.allComposites = composites;\n          }\n\n          return composites;\n        };\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n\n\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n\n\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n\n\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n\n          return composite;\n        };\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n\n          return composite;\n        };\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n\n          return composite;\n        };\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n\n          return composite;\n        };\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n\n\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n              vertices = [];\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n\n          return Bounds.create(vertices);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * This is automatically managed when bodies, constraints or composites are added or removed.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * An object used for storing cached results for performance reasons.\n         * This is used internally only and is automatically managed.\n         *\n         * @private\n         * @property cache\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n      var Body = {};\n      module.exports = Body;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Render = __webpack_require__(16);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      var Axes = __webpack_require__(11);\n\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              strokeStyle: null,\n              fillStyle: null,\n              lineWidth: null,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n          };\n          var body = Common.extend(defaults, options);\n\n          _initProperties(body, options);\n\n          return body;\n        };\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n\n\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n\n\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n\n\n        var _initProperties = function _initProperties(body, options) {\n          options = options || {}; // init required properties (order is important)\n\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity); // allow options to override the automatically calculated properties\n\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          }); // render properties\n\n          var defaultFillStyle = body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1']),\n              defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n              defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n\n\n        Body.set = function (body, settings, value) {\n          var property;\n\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n\n          for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n            value = settings[property];\n\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n\n              case 'centre':\n                Body.setCentre(body, value);\n                break;\n\n              default:\n                body[property] = value;\n            }\n          }\n        };\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n\n\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              part._original = null;\n            }\n          }\n        };\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n\n\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n\n\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n\n\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n\n\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          } // update properties\n\n\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area); // orient vertices around the centre of mass at origin (0, 0)\n\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1); // update inertia while vertices are at origin (0, 0)\n\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass)); // update geometry\n\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n\n\n        Body.setParts = function (body, parts, autoHull) {\n          var i; // add all the parts, ensuring that the first part is always the parent body\n\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true; // find the convex hull of all parts to set on the parent body\n\n          if (autoHull) {\n            var vertices = [];\n\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          } // sum the properties of all compound parts of the parent body\n\n\n          var total = Body._totalProperties(body);\n\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n        /**\n         * Set the centre of mass of the body. \n         * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n         * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n         * This is equal to moving `body.position` but not the `body.vertices`.\n         * Invalid if the `centre` falls outside the body's convex hull.\n         * @method setCentre\n         * @param {body} body\n         * @param {vector} centre\n         * @param {bool} relative\n         */\n\n\n        Body.setCentre = function (body, centre, relative) {\n          if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n          } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n          }\n        };\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n\n\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n\n\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n\n\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n\n\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n\n\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n\n\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n\n\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n              totalInertia = 0;\n          point = point || body.position;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i]; // scale vertices\n\n            Vertices.scale(part.vertices, scaleX, scaleY, point); // update properties\n\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area); // update inertia (requires vertices to be at origin)\n\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            } // scale position\n\n\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY; // update bounds\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          } // handle parent body\n\n\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          } // handle circles\n\n\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n\n\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2); // from the previous step\n\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n              velocityPrevX = body.position.x - body.positionPrev.x,\n              velocityPrevY = body.position.y - body.positionPrev.y; // update velocity with Verlet integration\n\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y; // update angular velocity with Verlet integration\n\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity; // track speed and acceleration\n\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity); // transform the body geometry\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n\n\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n\n\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          }; // sum the properties of all compound parts of the parent body\n\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n          * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n          *\n          * @property render.sprite.xOffset\n          * @type number\n          * @default 0\n          */\n\n        /**\n          * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n          *\n          * @property render.sprite.yOffset\n          * @type number\n          * @default 0\n          */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n      })();\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n      var Sleeping = {};\n      module.exports = Sleeping;\n\n      var Events = __webpack_require__(4);\n\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // update bodies sleeping status\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed; // wake up bodies if they have a force applied\n\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion); // biased average motion estimation between frames\n\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // wake up bodies involved in collisions\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i]; // don't wake inactive pairs\n\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent; // don't wake if at least one body is static\n\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                  movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n\n\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n      *\n      * For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n      *\n      * See `Matter.Engine` for collision events.\n      *\n      * @class Collision\n      */\n      var Collision = {};\n      module.exports = Collision;\n\n      var Vertices = __webpack_require__(3);\n\n      var Pair = __webpack_require__(9);\n\n      (function () {\n        var _supports = [];\n        var _overlapAB = {\n          overlap: 0,\n          axis: null\n        };\n        var _overlapBA = {\n          overlap: 0,\n          axis: null\n        };\n        /**\n         * Creates a new collision record.\n         * @method create\n         * @param {body} bodyA The first body part represented by the collision record\n         * @param {body} bodyB The second body part represented by the collision record\n         * @return {collision} A new collision record\n         */\n\n        Collision.create = function (bodyA, bodyB) {\n          return {\n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: {\n              x: 0,\n              y: 0\n            },\n            tangent: {\n              x: 0,\n              y: 0\n            },\n            penetration: {\n              x: 0,\n              y: 0\n            },\n            supports: []\n          };\n        };\n        /**\n         * Detect collision between two bodies.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n         * @return {collision|null} A collision record if detected, otherwise null\n         */\n\n\n        Collision.collides = function (bodyA, bodyB, pairs) {\n          Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n          if (_overlapAB.overlap <= 0) {\n            return null;\n          }\n\n          Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n          if (_overlapBA.overlap <= 0) {\n            return null;\n          } // reuse collision records for gc efficiency\n\n\n          var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n              collision;\n\n          if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n          } else {\n            collision = pair.collision;\n          }\n\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB;\n          var minOverlap;\n\n          if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n          } else {\n            minOverlap = _overlapBA;\n          }\n\n          var normal = collision.normal,\n              supports = collision.supports,\n              minAxis = minOverlap.axis,\n              minAxisX = minAxis.x,\n              minAxisY = minAxis.y; // ensure normal is facing away from bodyA\n\n          if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n          } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n          }\n\n          collision.tangent.x = -normal.y;\n          collision.tangent.y = normal.x;\n          collision.depth = minOverlap.overlap;\n          collision.penetration.x = normal.x * collision.depth;\n          collision.penetration.y = normal.y * collision.depth; // find support points, there is always either exactly one or two\n\n          var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n              supportCount = 0; // find the supports from bodyB that are inside bodyA\n\n\n          if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n          }\n\n          if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n          } // find the supports from bodyA that are inside bodyB\n\n\n          if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n              supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n              supports[supportCount++] = supportsA[1];\n            }\n          } // account for the edge case of overlapping but no vertex containment\n\n\n          if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n          } // update supports array size\n\n\n          supports.length = supportCount;\n          return collision;\n        };\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {object} result\n         * @param {vertices} verticesA\n         * @param {vertices} verticesB\n         * @param {axes} axes\n         */\n\n\n        Collision._overlapAxes = function (result, verticesA, verticesB, axes) {\n          var verticesALength = verticesA.length,\n              verticesBLength = verticesB.length,\n              verticesAX = verticesA[0].x,\n              verticesAY = verticesA[0].y,\n              verticesBX = verticesB[0].x,\n              verticesBY = verticesB[0].y,\n              axesLength = axes.length,\n              overlapMin = Number.MAX_VALUE,\n              overlapAxisNumber = 0,\n              overlap,\n              overlapAB,\n              overlapBA,\n              dot,\n              i,\n              j;\n\n          for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n\n            for (j = 1; j < verticesALength; j += 1) {\n              dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n              if (dot > maxA) {\n                maxA = dot;\n              } else if (dot < minA) {\n                minA = dot;\n              }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n              dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n              if (dot > maxB) {\n                maxB = dot;\n              } else if (dot < minB) {\n                minB = dot;\n              }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n              overlapMin = overlap;\n              overlapAxisNumber = i;\n\n              if (overlap <= 0) {\n                // can not be intersecting\n                break;\n              }\n            }\n          }\n\n          result.axis = axes[overlapAxisNumber];\n          result.overlap = overlapMin;\n        };\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n\n\n        Collision._projectToAxis = function (projection, vertices, axis) {\n          var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n              max = min;\n\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n\n          projection.min = min;\n          projection.max = max;\n        };\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {vector} normal\n         * @param {number} direction\n         * @return [vector]\n         */\n\n\n        Collision._findSupports = function (bodyA, bodyB, normal, direction) {\n          var vertices = bodyB.vertices,\n              verticesLength = vertices.length,\n              bodyAPositionX = bodyA.position.x,\n              bodyAPositionY = bodyA.position.y,\n              normalX = normal.x * direction,\n              normalY = normal.y * direction,\n              nearestDistance = Number.MAX_VALUE,\n              vertexA,\n              vertexB,\n              vertexC,\n              distance,\n              j; // find deepest vertex relative to the axis\n\n          for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y); // convex hill-climbing\n\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertexB;\n            }\n          } // measure next vertex\n\n\n          vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n          nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y); // compare with previous vertex\n\n          vertexB = vertices[(vertexA.index + 1) % verticesLength];\n\n          if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n            return _supports;\n          }\n\n          _supports[0] = vertexA;\n          _supports[1] = vertexC;\n          return _supports;\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A reference to the pair using this collision record, if there is one.\n         *\n         * @property pair\n         * @type {pair|null}\n         * @default null\n         */\n\n        /**\n         * A flag that indicates if the bodies were colliding when the collision was last updated.\n         * \n         * @property collided\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The first body part represented by the collision (see also `collision.parentA`).\n         * \n         * @property bodyA\n         * @type body\n         */\n\n        /**\n         * The second body part represented by the collision (see also `collision.parentB`).\n         * \n         * @property bodyB\n         * @type body\n         */\n\n        /**\n         * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n         * \n         * @property parentA\n         * @type body\n         */\n\n        /**\n         * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n         * \n         * @property parentB\n         * @type body\n         */\n\n        /**\n         * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n         *\n         * @readOnly\n         * @property depth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n         *\n         * @property normal\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A normalised `Vector` that is the tangent direction to the collision normal.\n         *\n         * @property tangent\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that represents the direction and depth of the collision.\n         *\n         * @property penetration\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * An array of body vertices that represent the support points in the collision.\n         * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n         *\n         * @property supports\n         * @type vector[]\n         * @default []\n         */\n\n      })();\n      /***/\n\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n      var Pair = {};\n      module.exports = Pair;\n\n      var Contact = __webpack_require__(17);\n\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n              bodyB = collision.bodyB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n\n\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n              supports = collision.supports,\n              activeContacts = pair.activeContacts,\n              parentA = collision.parentA,\n              parentB = collision.parentB,\n              parentAVerticesLength = parentA.vertices.length;\n          pair.isActive = true;\n          pair.timeUpdated = timestamp;\n          pair.collision = collision;\n          pair.separation = collision.depth;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n          pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n          pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n          pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n          collision.pair = pair;\n          activeContacts.length = 0;\n\n          for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n              activeContacts.push(contact);\n            } else {\n              activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n          }\n        };\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n\n\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n\n\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n      var Constraint = {};\n      module.exports = Constraint;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Bounds = __webpack_require__(1);\n\n      var Axes = __webpack_require__(11);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n\n        Constraint.create = function (options) {\n          var constraint = options; // if bodies defined but no points, use body centre\n\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          }; // calculate static length using initial world space points\n\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n              initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n              length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {}; // render\n\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n                fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          } // Solve free constraints last.\n\n\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return; // update reference angle\n\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          } // update reference angle\n\n\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n\n          var pointAWorld = pointA,\n              pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n              currentLength = Vector.magnitude(delta); // prevent singularity\n\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          } // solve distance constraint with Gauss-Siedel method\n\n\n          var difference = (currentLength - constraint.length) / currentLength,\n              stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n              force = Vector.mult(delta, difference * stiffness),\n              massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n              inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n              resistanceTotal = massTotal + inertiaTotal,\n              torque,\n              share,\n              normal,\n              normalVelocity,\n              relativeVelocity;\n\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            Sleeping.set(body, false); // update geometry and reset\n\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            } // dampen the cached impulse for warming next step\n\n\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n        /**\n         * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n         * @method pointAWorld\n         * @param {constraint} constraint\n         * @returns {vector} the world-space position\n         */\n\n\n        Constraint.pointAWorld = function (constraint) {\n          return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n          };\n        };\n        /**\n         * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n         * @method pointBWorld\n         * @param {constraint} constraint\n         * @returns {vector} the world-space position\n         */\n\n\n        Constraint.pointBWorld = function (constraint) {\n          return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n          };\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n      var Axes = {};\n      module.exports = Axes;\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {}; // find the unique axes, using edge normal gradients\n\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n                gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n\n          return Common.values(axes);\n        };\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n\n\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n      // TODO: true circle bodies\n      var Bodies = {};\n      module.exports = Bodies;\n\n      var Vertices = __webpack_require__(3);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      var Bounds = __webpack_require__(1);\n\n      var Vector = __webpack_require__(2);\n\n      (function () {\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n\n\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n              x2 = x1 + roof,\n              x3 = x2 + x1,\n              verticesPath;\n\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n\n\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          }; // approximate circles with polygons until true circles implemented in SAT\n\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius))); // optimisation: always use even number of sides (half the number of unique axes)\n\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n\n\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n              path = '',\n              offset = theta * 0.5;\n\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, polygon, options));\n        };\n        /**\n         * Utility to create a compound body based on set(s) of vertices.\n         * \n         * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n         * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n         * \n         * The resulting vertices are reorientated about their centre of mass,\n         * and offset such that `body.position` corresponds to this point.\n         * \n         * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n         * To later move the centre of mass see `Body.setCentre`.\n         * \n         * Note that automatic conconcave decomposition results are not always optimal. \n         * For best results, simplify the input vertices as much as possible first.\n         * By default this function applies some addtional simplification to help.\n         * \n         * Some outputs may also require further manual processing afterwards to be robust.\n         * In particular some parts may need to be overlapped to avoid collision gaps.\n         * Thin parts and sharp points should be avoided or removed where possible.\n         *\n         * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n         * \n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n         * @param {object} [options] The body options.\n         * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n         * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n         * @param {number} [minimumArea=10] Threshold when removing small parts.\n         * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n         * @return {body}\n         */\n\n\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n          var decomp = Common.getDecomp(),\n              canDecomp,\n              body,\n              parts,\n              isConvex,\n              isConcave,\n              vertices,\n              i,\n              j,\n              k,\n              v,\n              z; // check decomp is as expected\n\n          canDecomp = Boolean(decomp && decomp.quickDecomp);\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n          removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01; // ensure vertexSets is an array of arrays\n\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n              Common.warnOnce('Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.');\n            }\n\n            if (isConvex || !canDecomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              }); // vertices are concave and simple, we can decompose into parts\n\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n              if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints); // use the quick decomposition algorithm (Bayazit)\n\n              var decomposed = decomp.quickDecomp(concave); // for each decomposed chunk\n\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i]; // convert vertices into the correct structure\n\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                }); // skip small chunks\n\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue; // create a compound part\n\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          } // create body parts\n\n\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          } // flag internal edges (coincident part edges)\n\n\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                      pbv = partB.vertices; // iterate vertices of both parts\n\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                          db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length])); // if both vertices are very close, consider the edge concident (internal)\n\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options)); // offset such that body.position is at the centre off mass\n\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n      var Mouse = {};\n      module.exports = Mouse;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n\n\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n\n\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n\n\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n\n\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n\n\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n              rootNode = document.documentElement || document.body.parentNode || document.body,\n              scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n              scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n              touches = event.changedTouches,\n              x,\n              y;\n\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n      /***/\n\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n      *\n      * @class Detector\n      */\n      var Detector = {};\n      module.exports = Detector;\n\n      var Common = __webpack_require__(0);\n\n      var Collision = __webpack_require__(8);\n\n      (function () {\n        /**\n         * Creates a new collision detector.\n         * @method create\n         * @param {} options\n         * @return {detector} A new collision detector\n         */\n        Detector.create = function (options) {\n          var defaults = {\n            bodies: [],\n            pairs: null\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * Sets the list of bodies in the detector.\n         * @method setBodies\n         * @param {detector} detector\n         * @param {body[]} bodies\n         */\n\n\n        Detector.setBodies = function (detector, bodies) {\n          detector.bodies = bodies.slice(0);\n        };\n        /**\n         * Clears the detector including its list of bodies.\n         * @method clear\n         * @param {detector} detector\n         */\n\n\n        Detector.clear = function (detector) {\n          detector.bodies = [];\n        };\n        /**\n         * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n         * \n         * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n         * If a specific ordering is required then apply a sort to the resulting array.\n         * @method collisions\n         * @param {detector} detector\n         * @return {collision[]} collisions\n         */\n\n\n        Detector.collisions = function (detector) {\n          var collisions = [],\n              pairs = detector.pairs,\n              bodies = detector.bodies,\n              bodiesLength = bodies.length,\n              canCollide = Detector.canCollide,\n              collides = Collision.collides,\n              i,\n              j;\n          bodies.sort(Detector._compareBoundsX);\n\n          for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n              var bodyB = bodies[j],\n                  boundsB = bodyB.bounds;\n\n              if (boundsB.min.x > boundXMax) {\n                break;\n              }\n\n              if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                continue;\n              }\n\n              if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                continue;\n              }\n\n              if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                continue;\n              }\n\n              var partsBLength = bodyB.parts.length;\n\n              if (partsASingle && partsBLength === 1) {\n                var collision = collides(bodyA, bodyB, pairs);\n\n                if (collision) {\n                  collisions.push(collision);\n                }\n              } else {\n                var partsAStart = partsALength > 1 ? 1 : 0,\n                    partsBStart = partsBLength > 1 ? 1 : 0;\n\n                for (var k = partsAStart; k < partsALength; k++) {\n                  var partA = bodyA.parts[k],\n                      boundsA = partA.bounds;\n\n                  for (var z = partsBStart; z < partsBLength; z++) {\n                    var partB = bodyB.parts[z],\n                        boundsB = partB.bounds;\n\n                    if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                      continue;\n                    }\n\n                    var collision = collides(partA, partB, pairs);\n\n                    if (collision) {\n                      collisions.push(collision);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n\n\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n        /**\n         * The comparison function used in the broadphase algorithm.\n         * Returns the signed delta of the bodies bounds on the x-axis.\n         * @private\n         * @method _sortCompare\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {number} The signed delta used for sorting\n         */\n\n\n        Detector._compareBoundsX = function (bodyA, bodyB) {\n          return bodyA.bounds.min.x - bodyB.bounds.min.x;\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The array of `Matter.Body` between which the detector finds collisions.\n         * \n         * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n         * @property pairs\n         * @type {pairs|null}\n         * @default null\n         */\n\n      })();\n      /***/\n\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n      var Plugin = {};\n      module.exports = Plugin;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Plugin._registry = {};\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n\n          return plugin;\n        };\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n\n\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n\n\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n\n\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n\n\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n\n\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n          return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n\n\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n\n          var dependencies = Plugin.dependencies(module),\n              sortedDependencies = Common.topologicalSort(dependencies),\n              status = [];\n\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n          }\n\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n\n\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n              name = parsedBase.name;\n          tracked = tracked || {};\n\n          if (name in tracked) {\n            return;\n          }\n\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n\n            return parsed.name;\n          });\n\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n\n          return tracked;\n        };\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n\n\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Greater than ranges e.g. `>1.2.3`\n         * - Greater than or equal ranges e.g. `>=1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n\n\n        Plugin.versionParse = function (range) {\n          var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n\n          var parts = pattern.exec(range);\n          var major = Number(parts[4]);\n          var minor = Number(parts[5]);\n          var patch = Number(parts[6]);\n          return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n          };\n        };\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n\n\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var r = Plugin.versionParse(range),\n              v = Plugin.versionParse(version);\n\n          if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n              return true;\n            }\n\n            if (r.operator === '>') {\n              return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n              return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n              return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n              if (r.major > 0) {\n                return v.major === r.major && v.number >= r.number;\n              }\n\n              if (r.minor > 0) {\n                return v.minor === r.minor && v.patch >= r.patch;\n              }\n\n              return v.patch === r.patch;\n            }\n          }\n\n          return version === range || version === '*';\n        };\n      })();\n      /***/\n\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n      var Render = {};\n      module.exports = Render;\n\n      var Common = __webpack_require__(0);\n\n      var Composite = __webpack_require__(5);\n\n      var Bounds = __webpack_require__(1);\n\n      var Events = __webpack_require__(4);\n\n      var Vector = __webpack_require__(2);\n\n      var Mouse = __webpack_require__(13);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        Render._goodFps = 30;\n        Render._goodDelta = 1000 / 60;\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n              historySize: 60,\n              delta: 0,\n              deltaHistory: [],\n              lastTime: 0,\n              lastTimestamp: 0,\n              lastElapsed: 0,\n              timestampElapsed: 0,\n              timestampElapsedHistory: [],\n              engineDeltaHistory: [],\n              engineElapsedHistory: [],\n              elapsedHistory: []\n            },\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#14151f',\n              wireframeBackground: '#14151f',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showStats: false,\n              showPerformance: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          }; // for temporary back compatibility only\n\n          render.options.showBroadphase = false;\n\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n\n\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n\n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n              Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n              Render.performance(render, render.context, time);\n            }\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n\n\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n\n\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n              canvas = render.canvas;\n\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n        };\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n\n\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          }; // find bounds of all objects\n\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : object.min || object.position || object,\n                max = object.bounds ? object.bounds.max : object.max || object.position || object;\n\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          } // find ratios\n\n\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n              height = bounds.max.y - bounds.min.y + 2 * padding.y,\n              viewHeight = render.canvas.height,\n              viewWidth = render.canvas.width,\n              outerRatio = viewWidth / viewHeight,\n              innerRatio = width / height,\n              scaleX = 1,\n              scaleY = 1; // find scale factor\n\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          } // enable bounds\n\n\n          render.options.hasBounds = true; // position and size\n\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY; // center\n\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          } // padding\n\n\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y; // update mouse\n\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n\n\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n          render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n\n\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n\n\n        Render.world = function (render, time) {\n          var startTime = Common.now(),\n              engine = render.engine,\n              world = engine.world,\n              canvas = render.canvas,\n              context = render.context,\n              options = render.options,\n              timing = render.timing;\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              background = options.wireframes ? options.wireframeBackground : options.background,\n              bodies = [],\n              constraints = [],\n              i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event); // apply background if it has changed\n\n          if (render.currentBackground !== background) _applyBackground(render, background); // clear the canvas with a transparent fill, to allow the canvas background to show\n\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over'; // handle bounds\n\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            Render.startViewTransform(render); // update mouse\n\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n              render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n          }\n\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context); // optimised method for wireframes only\n\n            Render.bodyWireframes(render, bodies, context);\n          }\n\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n\n          Events.trigger(render, 'afterRender', event); // log the time elapsed computing this update\n\n          timing.lastElapsed = Common.now() - startTime;\n        };\n        /**\n         * Renders statistics about the engine and world useful for debugging.\n         * @private\n         * @method stats\n         * @param {render} render\n         * @param {RenderingContext} context\n         * @param {Number} time\n         */\n\n\n        Render.stats = function (render, context, time) {\n          var engine = render.engine,\n              world = engine.world,\n              bodies = Composite.allBodies(world),\n              parts = 0,\n              width = 55,\n              height = 44,\n              x = 0,\n              y = 0; // count parts\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n          } // sections\n\n\n          var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n          }; // background\n\n          context.fillStyle = '#0e0f19';\n          context.fillRect(x, y, width * 5.5, height);\n          context.font = '12px Arial';\n          context.textBaseline = 'top';\n          context.textAlign = 'right'; // sections\n\n          for (var key in sections) {\n            var section = sections[key]; // label\n\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8); // value\n\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n            x += width;\n          }\n        };\n        /**\n         * Renders engine and render performance information.\n         * @private\n         * @method performance\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n\n\n        Render.performance = function (render, context) {\n          var engine = render.engine,\n              timing = render.timing,\n              deltaHistory = timing.deltaHistory,\n              elapsedHistory = timing.elapsedHistory,\n              timestampElapsedHistory = timing.timestampElapsedHistory,\n              engineDeltaHistory = timing.engineDeltaHistory,\n              engineElapsedHistory = timing.engineElapsedHistory,\n              lastEngineDelta = engine.timing.lastDelta;\n\n          var deltaMean = _mean(deltaHistory),\n              elapsedMean = _mean(elapsedHistory),\n              engineDeltaMean = _mean(engineDeltaHistory),\n              engineElapsedMean = _mean(engineElapsedHistory),\n              timestampElapsedMean = _mean(timestampElapsedHistory),\n              rateMean = timestampElapsedMean / deltaMean || 0,\n              fps = 1000 / deltaMean || 0;\n\n          var graphHeight = 4,\n              gap = 12,\n              width = 60,\n              height = 34,\n              x = 10,\n              y = 69; // background\n\n          context.fillStyle = '#0e0f19';\n          context.fillRect(0, 50, gap * 4 + width * 5 + 22, height); // show FPS\n\n          Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + ' fps', fps / Render._goodFps, function (i) {\n            return deltaHistory[i] / deltaMean - 1;\n          }); // show engine delta\n\n          Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + ' dt', Render._goodDelta / lastEngineDelta, function (i) {\n            return engineDeltaHistory[i] / engineDeltaMean - 1;\n          }); // show engine update time\n\n          Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + ' ut', 1 - engineElapsedMean / Render._goodFps, function (i) {\n            return engineElapsedHistory[i] / engineElapsedMean - 1;\n          }); // show render time\n\n          Render.status(context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + ' rt', 1 - elapsedMean / Render._goodFps, function (i) {\n            return elapsedHistory[i] / elapsedMean - 1;\n          }); // show effective speed\n\n          Render.status(context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + ' x', rateMean * rateMean * rateMean, function (i) {\n            return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;\n          });\n        };\n        /**\n         * Renders a label, indicator and a chart.\n         * @private\n         * @method status\n         * @param {RenderingContext} context\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} count\n         * @param {string} label\n         * @param {string} indicator\n         * @param {function} plotY\n         */\n\n\n        Render.status = function (context, x, y, width, height, count, label, indicator, plotY) {\n          // background\n          context.strokeStyle = '#888';\n          context.fillStyle = '#444';\n          context.lineWidth = 1;\n          context.fillRect(x, y + 7, width, 1); // chart\n\n          context.beginPath();\n          context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n\n          for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n          }\n\n          context.stroke(); // indicator\n\n          context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n          context.fillRect(x, y - 7, 4, 4); // label\n\n          context.font = '12px Arial';\n          context.textBaseline = 'middle';\n          context.textAlign = 'right';\n          context.fillStyle = '#eee';\n          context.fillText(label, x + width, y - 5);\n        };\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n\n\n        Render.constraints = function (constraints, context) {\n          var c = context;\n\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                    normal = Vector.perp(Vector.normalise(delta)),\n                    coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                    offset;\n\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n\n              c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              showInternalEdges = options.showInternalEdges || !options.wireframes,\n              body,\n              part,\n              i,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                    texture = _getTexture(render, sprite.texture);\n\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale); // revert translation, hopefully faster than save / restore\n\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n\n              c.globalAlpha = 1;\n            }\n          }\n        };\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n              showInternalEdges = render.options.showInternalEdges,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render all bodies\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render convex hulls\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n              i,\n              j,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n\n\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath();\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n            if (!body.render.visible) continue;\n\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              body,\n              part,\n              i,\n              k;\n          c.beginPath(); // render current positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n\n          c.fill();\n          c.beginPath(); // render previous positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n              i,\n              j;\n\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render collision positions\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                  vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n\n          c.fill();\n          c.beginPath(); // render collision normals\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                  normalPosY = pair.activeContacts[0].vertex.y;\n\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render separations\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n\n\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n              selected = inspector.selected,\n              render = inspector.render,\n              options = render.options,\n              bounds;\n\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          } // render selection region\n\n\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n        /**\n         * Updates render timing.\n         * @method _updateTiming\n         * @private\n         * @param {render} render\n         * @param {number} time\n         */\n\n\n        var _updateTiming = function _updateTiming(render, time) {\n          var engine = render.engine,\n              timing = render.timing,\n              historySize = timing.historySize,\n              timestamp = engine.timing.timestamp;\n          timing.delta = time - timing.lastTime || Render._goodDelta;\n          timing.lastTime = time;\n          timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n          timing.lastTimestamp = timestamp;\n          timing.deltaHistory.unshift(timing.delta);\n          timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n          timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n          timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n          timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n          timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n          timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n          timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n          timing.elapsedHistory.unshift(timing.lastElapsed);\n          timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n        };\n        /**\n         * Returns the mean value of the given numbers.\n         * @method _mean\n         * @private\n         * @param {Number[]} values\n         * @return {Number} the mean of given values\n         */\n\n\n        var _mean = function _mean(values) {\n          var result = 0;\n\n          for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n          }\n\n          return result / values.length || 0;\n        };\n        /**\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n\n\n        var _createCanvas = function _createCanvas(width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          canvas.onselectstart = function () {\n            return false;\n          };\n\n          return canvas;\n        };\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n\n\n        var _getPixelRatio = function _getPixelRatio(canvas) {\n          var context = canvas.getContext('2d'),\n              devicePixelRatio = window.devicePixelRatio || 1,\n              backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n\n\n        var _applyBackground = function _applyBackground(render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n\n        /**\n         * The mouse to render if `render.options.showMousePosition` is enabled.\n         *\n         * @property mouse\n         * @type mouse\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         * See also the `options.pixelRatio` property to change render quality.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         * See also the `options.pixelRatio` property to change render quality.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n         *\n         * @property options.pixelRatio\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A CSS background color string to use when `render.options.wireframes` is disabled.\n         * This may be also set to `'transparent'` or equivalent.\n         *\n         * @property options.background\n         * @type string\n         * @default '#14151f'\n         */\n\n        /**\n         * A CSS background color string to use when `render.options.wireframes` is enabled.\n         * This may be also set to `'transparent'` or equivalent.\n         *\n         * @property options.wireframeBackground\n         * @type string\n         * @default '#14151f'\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable all debug information overlays together.  \n         * This includes and has priority over the values of:\n         *\n         * - `render.options.showStats`\n         * - `render.options.showPerformance`\n         *\n         * @property options.showDebug\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the engine stats info overlay.  \n         * From left to right, the values shown are:\n         *\n         * - body parts total\n         * - body total\n         * - constraints total\n         * - composites total\n         * - collision pairs total\n         *\n         * @property options.showStats\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable performance charts.  \n         * From left to right, the values shown are:\n         *\n         * - average render frequency (e.g. 60 fps)\n         * - exact engine delta time used for last update (e.g. 16.66ms)\n         * - average engine execution duration (e.g. 5.00ms)\n         * - average render execution duration (e.g. 0.40ms)\n         * - average effective play speed (e.g. '1.00x' is 'real-time')\n         *\n         * Each value is recorded over a fixed sample of past frames (60 frames).\n         *\n         * A chart shown below each value indicates the variance from the average over the sample.\n         * The more stable or fixed the value is the flatter the chart will appear.\n         *\n         * @property options.showPerformance\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable rendering entirely.\n         *\n         * @property options.enabled\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n         *\n         * @property options.wireframes\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A flag to enable or disable sleeping bodies indicators.\n         *\n         * @property options.showSleeping\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A flag to enable or disable the debug information overlay.\n         *\n         * @property options.showDebug\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the collision broadphase debug overlay.\n         *\n         * @deprecated no longer implemented\n         * @property options.showBroadphase\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body bounds debug overlay.\n         *\n         * @property options.showBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body velocity debug overlay.\n         *\n         * @property options.showVelocity\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body collisions debug overlay.\n         *\n         * @property options.showCollisions\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the collision resolver separations debug overlay.\n         *\n         * @property options.showSeparations\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body axes debug overlay.\n         *\n         * @property options.showAxes\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body positions debug overlay.\n         *\n         * @property options.showPositions\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body angle debug overlay.\n         *\n         * @property options.showAngleIndicator\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body and part ids debug overlay.\n         *\n         * @property options.showIds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body vertex numbers debug overlay.\n         *\n         * @property options.showVertexNumbers\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body convex hulls debug overlay.\n         *\n         * @property options.showConvexHulls\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body internal edges debug overlay.\n         *\n         * @property options.showInternalEdges\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the mouse position debug overlay.\n         *\n         * @property options.showMousePosition\n         * @type boolean\n         * @default false\n         */\n\n      })();\n      /***/\n\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n      var Contact = {};\n      module.exports = Contact;\n\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n      })();\n      /***/\n\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n      var Engine = {};\n      module.exports = Engine;\n\n      var Sleeping = __webpack_require__(7);\n\n      var Resolver = __webpack_require__(19);\n\n      var Detector = __webpack_require__(14);\n\n      var Pairs = __webpack_require__(20);\n\n      var Events = __webpack_require__(4);\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(10);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (options) {\n          options = options || {};\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            timing: {\n              timestamp: 0,\n              timeScale: 1,\n              lastDelta: 0,\n              lastElapsed: 0\n            }\n          };\n          var engine = Common.extend(defaults, options);\n          engine.world = options.world || Composite.create({\n            label: 'World'\n          });\n          engine.pairs = options.pairs || Pairs.create();\n          engine.detector = options.detector || Detector.create(); // for temporary back compatibility only\n\n          engine.grid = {\n            buckets: []\n          };\n          engine.world.gravity = engine.gravity;\n          engine.broadphase = engine.grid;\n          engine.metrics = {};\n          return engine;\n        };\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n\n\n        Engine.update = function (engine, delta, correction) {\n          var startTime = Common.now();\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n              detector = engine.detector,\n              pairs = engine.pairs,\n              timing = engine.timing,\n              timestamp = timing.timestamp,\n              i; // increment timestamp\n\n          timing.timestamp += delta * timing.timeScale;\n          timing.lastDelta = delta * timing.timeScale; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event); // get all bodies and all constraints in the world\n\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world); // update the detector bodies if they have changed\n\n          if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n          } // reset all composite modified flags\n\n\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          } // update sleeping if enabled\n\n\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale); // apply gravity to all bodies\n\n          Engine._bodiesApplyGravity(allBodies, engine.gravity); // update all body position and rotation by integration\n\n\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds); // update all constraints (first pass)\n\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // find all collisions\n\n          detector.pairs = engine.pairs;\n          var collisions = Detector.collisions(detector); // update collision pairs\n\n          Pairs.update(pairs, collisions, timestamp); // wake up bodies involved in collisions\n\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale); // trigger collision events\n\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          }); // iteratively resolve position between collisions\n\n          Resolver.preSolvePosition(pairs.list);\n\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n\n          Resolver.postSolvePosition(allBodies); // update all constraints (second pass)\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // iteratively resolve velocity between collisions\n\n          Resolver.preSolveVelocity(pairs.list);\n\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          } // trigger collision events\n\n\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          }); // clear force buffers\n\n          Engine._bodiesClearForces(allBodies);\n\n          Events.trigger(engine, 'afterUpdate', event); // log the time elapsed computing this update\n\n          engine.timing.lastElapsed = Common.now() - startTime;\n          return engine;\n        };\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n\n\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n        /**\n         * Clears the engine pairs and detector.\n         * @method clear\n         * @param {engine} engine\n         */\n\n\n        Engine.clear = function (engine) {\n          Pairs.clear(engine.pairs);\n          Detector.clear(engine.detector);\n        };\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n\n\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset force buffers\n\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n\n\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue; // apply gravity\n\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n\n\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n        /**\n         * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n         * @deprecated use Matter.Runner.run(engine) instead\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {object} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {object} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {object} event An event object\n        * @param {pair[]} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {object} event An event object\n        * @param {pair[]} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {object} event An event object\n        * @param {pair[]} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n         * It is updated by timing from the start of the last `Engine.update` call until it ends.\n         *\n         * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n         *\n         * @property timing.lastElapsed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that represents the `delta` value used in the last engine update.\n         *\n         * @property timing.lastDelta\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Matter.Detector` instance.\n         *\n         * @property detector\n         * @type detector\n         * @default a Matter.Detector instance\n         */\n\n        /**\n         * A `Matter.Grid` instance.\n         *\n         * @deprecated replaced by `engine.detector`\n         * @property grid\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * Replaced by and now alias for `engine.grid`.\n         *\n         * @deprecated replaced by `engine.detector`\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n         *\n         * @property world\n         * @type composite\n         * @default a Matter.Composite instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * The gravity to apply on all bodies in `engine.world`.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n      })();\n      /***/\n\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n      var Resolver = {};\n      module.exports = Resolver;\n\n      var Vertices = __webpack_require__(3);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n\n        Resolver.preSolvePosition = function (pairs) {\n          var i,\n              pair,\n              activeCount,\n              pairsLength = pairs.length; // find total contacts on each body\n\n          for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n              pair,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              contactShare,\n              positionImpulse,\n              positionDampen = Resolver._positionDampen,\n              pairsLength = pairs.length; // find impulses required to resolve penetration\n\n          for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal; // get current separation between body edges involved in collision\n\n            pair.separation = normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n          }\n\n          for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n\n\n        Resolver.postSolvePosition = function (bodies) {\n          var positionWarming = Resolver._positionWarming,\n              bodiesLength = bodies.length,\n              verticesTranslate = Vertices.translate,\n              boundsUpdate = Bounds.update;\n\n          for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity; // reset contact count\n\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                verticesTranslate(part.vertices, positionImpulse);\n                boundsUpdate(part.bounds, part.vertices, velocity);\n                part.position.x += positionImpulseX;\n                part.position.y += positionImpulseY;\n              } // move the body without changing velocity\n\n\n              body.positionPrev.x += positionImpulseX;\n              body.positionPrev.y += positionImpulseY;\n\n              if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                // reset cached impulse if the body has velocity along it\n                positionImpulse.x = 0;\n                positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                positionImpulse.x *= positionWarming;\n                positionImpulse.y *= positionWarming;\n              }\n            }\n          }\n        };\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n\n\n        Resolver.preSolveVelocity = function (pairs) {\n          var pairsLength = pairs.length,\n              i,\n              j;\n\n          for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent; // resolve each contact\n\n            for (j = 0; j < contactsLength; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex,\n                  normalImpulse = contact.normalImpulse,\n                  tangentImpulse = contact.tangentImpulse;\n\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                    impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                  bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                  bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);\n                }\n              }\n            }\n          }\n        };\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n              restingThresh = Resolver._restingThresh * timeScaleSquared,\n              frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n              restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n              NumberMaxValue = Number.MAX_VALUE,\n              pairsLength = pairs.length,\n              tangentImpulse,\n              maxFriction,\n              i,\n              j;\n\n          for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared; // update body velocities\n\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev; // resolve each contact\n\n            for (j = 0; j < contactsLength; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex;\n              var offsetAX = contactVertex.x - bodyA.position.x,\n                  offsetAY = contactVertex.y - bodyA.position.y,\n                  offsetBX = contactVertex.x - bodyB.position.x,\n                  offsetBY = contactVertex.y - bodyB.position.y;\n              var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                  velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                  velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                  velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n              var relativeVelocityX = velocityPointAX - velocityPointBX,\n                  relativeVelocityY = velocityPointAY - velocityPointBY;\n              var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                  tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY; // coulomb friction\n\n              var normalOverlap = pair.separation + normalVelocity;\n              var normalForce = Math.min(normalOverlap, 1);\n              normalForce = normalOverlap < 0 ? 0 : normalForce;\n              var frictionLimit = normalForce * friction;\n\n              if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n\n                if (tangentImpulse < -maxFriction) {\n                  tangentImpulse = -maxFriction;\n                } else if (tangentImpulse > maxFriction) {\n                  tangentImpulse = maxFriction;\n                }\n              } else {\n                tangentImpulse = tangentVelocity;\n                maxFriction = NumberMaxValue;\n              } // account for mass, inertia and contact offset\n\n\n              var oAcN = offsetAX * normalY - offsetAY * normalX,\n                  oBcN = offsetBX * normalY - offsetBY * normalX,\n                  share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN); // raw impulses\n\n              var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n              tangentImpulse *= share; // handle high velocity and resting collisions separately\n\n              if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse += normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              } // handle high velocity and resting collisions separately\n\n\n              if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse += tangentImpulse;\n                if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              } // total impulse from contact\n\n\n              var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                  impulseY = normalY * normalImpulse + tangentY * tangentImpulse; // apply impulse from contact\n\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n              }\n\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n      var Pairs = {};\n      module.exports = Pairs;\n\n      var Pair = __webpack_require__(9);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n\n\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n              pairsListLength = pairsList.length,\n              pairsTable = pairs.table,\n              collisionsLength = collisions.length,\n              collisionStart = pairs.collisionStart,\n              collisionEnd = pairs.collisionEnd,\n              collisionActive = pairs.collisionActive,\n              collision,\n              pairIndex,\n              pair,\n              i; // clear collision state arrays, but maintain old reference\n\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n\n          for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n          }\n\n          for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n              // pair already exists (but may or may not be active)\n              if (pair.isActive) {\n                // pair exists and is active\n                collisionActive.push(pair);\n              } else {\n                // pair exists but was inactive, so a collision has just started again\n                collisionStart.push(pair);\n              } // update the pair\n\n\n              Pair.update(pair, collision, timestamp);\n              pair.confirmedActive = true;\n            } else {\n              // pair did not exist, create a new pair\n              pair = Pair.create(collision, timestamp);\n              pairsTable[pair.id] = pair; // push the new pair\n\n              collisionStart.push(pair);\n              pairsList.push(pair);\n            }\n          } // find pairs that are no longer active\n\n\n          var removePairIndex = [];\n          pairsListLength = pairsList.length;\n\n          for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n\n            if (!pair.confirmedActive) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n\n              if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                removePairIndex.push(i);\n              }\n            }\n          } // remove inactive pairs\n\n\n          for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n          }\n        };\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n\n\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n      /***/\n\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var Matter = module.exports = __webpack_require__(22);\n\n      Matter.Axes = __webpack_require__(11);\n      Matter.Bodies = __webpack_require__(12);\n      Matter.Body = __webpack_require__(6);\n      Matter.Bounds = __webpack_require__(1);\n      Matter.Collision = __webpack_require__(8);\n      Matter.Common = __webpack_require__(0);\n      Matter.Composite = __webpack_require__(5);\n      Matter.Composites = __webpack_require__(23);\n      Matter.Constraint = __webpack_require__(10);\n      Matter.Contact = __webpack_require__(17);\n      Matter.Detector = __webpack_require__(14);\n      Matter.Engine = __webpack_require__(18);\n      Matter.Events = __webpack_require__(4);\n      Matter.Grid = __webpack_require__(24);\n      Matter.Mouse = __webpack_require__(13);\n      Matter.MouseConstraint = __webpack_require__(25);\n      Matter.Pair = __webpack_require__(9);\n      Matter.Pairs = __webpack_require__(20);\n      Matter.Plugin = __webpack_require__(15);\n      Matter.Query = __webpack_require__(26);\n      Matter.Render = __webpack_require__(16);\n      Matter.Resolver = __webpack_require__(19);\n      Matter.Runner = __webpack_require__(27);\n      Matter.SAT = __webpack_require__(28);\n      Matter.Sleeping = __webpack_require__(7);\n      Matter.Svg = __webpack_require__(29);\n      Matter.Vector = __webpack_require__(2);\n      Matter.Vertices = __webpack_require__(3);\n      Matter.World = __webpack_require__(30); // temporary back compatibility\n\n      Matter.Engine.run = Matter.Runner.run;\n      Matter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\r\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n      *\r\n      * @class Matter\r\n      */\n      var Matter = {};\n      module.exports = Matter;\n\n      var Plugin = __webpack_require__(15);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\r\n         * The library name.\r\n         * @property name\r\n         * @readOnly\r\n         * @type {String}\r\n         */\n        Matter.name = 'matter-js';\n        /**\r\n         * The library version.\r\n         * @property version\r\n         * @readOnly\r\n         * @type {String}\r\n         */\n\n        Matter.version = true ? \"0.18.0\" : undefined;\n        /**\r\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n         * @property uses\r\n         * @type {Array}\r\n         */\n\n        Matter.uses = [];\n        /**\r\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n         * @property used\r\n         * @readOnly\r\n         * @type {Array}\r\n         */\n\n        Matter.used = [];\n        /**\r\n         * Installs the given plugins on the `Matter` namespace.\r\n         * This is a short-hand for `Plugin.use`, see it for more information.\r\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n         * @method use\r\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n         */\n\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n        /**\r\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n         * See also docs for `Common.chain`.\r\n         * @method before\r\n         * @param {string} path The path relative to `Matter`\r\n         * @param {function} func The function to chain before the original\r\n         * @return {function} The chained function that replaced the original\r\n         */\n\n\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n        /**\r\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n         * See also docs for `Common.chain`.\r\n         * @method after\r\n         * @param {string} path The path relative to `Matter`\r\n         * @param {function} func The function to chain after the original\r\n         * @return {function} The chained function that replaced the original\r\n         */\n\n\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n      /***/\n\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n      var Composites = {};\n      module.exports = Composites;\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(10);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      var Bodies = __webpack_require__(12);\n\n      var deprecated = Common.deprecated;\n\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n            label: 'Stack'\n          }),\n              x = xx,\n              y = yy,\n              lastBody,\n              i = 0;\n\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                    bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n\n          return stack;\n        };\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n\n\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n\n          composite.label += ' Chain';\n          return composite;\n        };\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n\n\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n              row,\n              col,\n              bodyA,\n              bodyB,\n              bodyC;\n\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n\n          composite.label += ' Mesh';\n          return composite;\n        };\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n\n\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return; // reverse row order\n\n            row = actualRows - row;\n            var start = row,\n                end = columns - 1 - row;\n            if (column < start || column > end) return; // retroactively fix the first body's position, since width was unknown\n\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n        /**\n         * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n         * @deprecated moved to newtonsCradle example\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n\n\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n                constraint = Constraint.create({\n              pointA: {\n                x: xx + i * (size * separation),\n                y: yy\n              },\n              bodyB: circle\n            });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n\n          return newtonsCradle;\n        };\n\n        deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n        /**\n         * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n         * @deprecated moved to car example\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n              wheelBase = 20,\n              wheelAOffset = -width * 0.5 + wheelBase,\n              wheelBOffset = width * 0.5 - wheelBase,\n              wheelYOffset = 0;\n          var car = Composite.create({\n            label: 'Car'\n          }),\n              body = Bodies.rectangle(xx, yy, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n\n        deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n        /**\n         * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n         * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n         * @deprecated moved to softBody and cloth examples\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n\n        deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n      })();\n      /***/\n\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * This module has now been replaced by `Matter.Detector`.\n      *\n      * All usage should be migrated to `Matter.Detector` or another alternative.\n      * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n      *\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      * @deprecated\n      */\n      var Grid = {};\n      module.exports = Grid;\n\n      var Pair = __webpack_require__(9);\n\n      var Common = __webpack_require__(0);\n\n      var deprecated = Common.deprecated;\n\n      (function () {\n        /**\n         * Creates a new grid.\n         * @deprecated replaced by Matter.Detector\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @deprecated replaced by Matter.Detector\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n\n\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n              col,\n              row,\n              world = engine.world,\n              buckets = grid.buckets,\n              bucket,\n              bucketId,\n              gridChanged = false;\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue; // temporary back compatibility bounds check\n\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;\n\n            var newRegion = Grid._getRegion(grid, body); // if the body has changed grid region\n\n\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              if (!body.region || forceUpdate) body.region = newRegion;\n\n              var union = Grid._regionUnion(newRegion, body.region); // update grid buckets affected by region change\n              // iterate over the union of both regions\n\n\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow; // remove from old region buckets\n\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  } // add to new region buckets\n\n\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              } // set the new region\n\n\n              body.region = newRegion; // flag changes so we can update pairs\n\n              gridChanged = true;\n            }\n          } // update pairs list only if pairs changed (i.e. a body changed region)\n\n\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n\n        deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n        /**\n         * Clears the grid.\n         * @deprecated replaced by Matter.Detector\n         * @method clear\n         * @param {grid} grid\n         */\n\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n\n        deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n              endCol = Math.max(regionA.endCol, regionB.endCol),\n              startRow = Math.min(regionA.startRow, regionB.startRow),\n              endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n\n\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n              startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n              endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n              startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n              endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n\n\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n\n\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n\n\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          var gridPairs = grid.pairs,\n              pairId = Pair.id,\n              bucketLength = bucket.length,\n              i; // add new pairs\n\n          for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue; // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              gridPairs[id] = [body, bodyB, 1];\n            }\n          } // add to bodies (after pairs, otherwise pairs with self)\n\n\n          bucket.push(body);\n        };\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          var gridPairs = grid.pairs,\n              pairId = Pair.id,\n              i; // remove from bucket\n\n          bucket.splice(Common.indexOf(bucket, body), 1);\n          var bucketLength = bucket.length; // update pair counts\n\n          for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n            if (pair) pair[2] -= 1;\n          }\n        };\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n\n\n        Grid._createActivePairsList = function (grid) {\n          var pair,\n              gridPairs = grid.pairs,\n              pairKeys = Common.keys(gridPairs),\n              pairKeysLength = pairKeys.length,\n              pairs = [],\n              k; // iterate over grid.pairs\n\n          for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]]; // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete gridPairs[pairKeys[k]];\n            }\n          }\n\n          return pairs;\n        };\n      })();\n      /***/\n\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n\n      var Vertices = __webpack_require__(3);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Mouse = __webpack_require__(13);\n\n      var Events = __webpack_require__(4);\n\n      var Detector = __webpack_require__(14);\n\n      var Constraint = __webpack_require__(10);\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n\n\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n              constraint = mouseConstraint.constraint,\n              body = mouseConstraint.body;\n\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n\n\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n              mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          }); // reset the mouse state ready for the next step\n\n          Mouse.clearSourceEvents(mouse);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n      })();\n      /***/\n\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n      var Query = {};\n      module.exports = Query;\n\n      var Vector = __webpack_require__(2);\n\n      var Collision = __webpack_require__(8);\n\n      var Bounds = __webpack_require__(1);\n\n      var Bodies = __webpack_require__(12);\n\n      var Vertices = __webpack_require__(3);\n\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {collision[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [],\n              bodiesLength = bodies.length,\n              bounds = body.bounds,\n              collides = Collision.collides,\n              overlaps = Bounds.overlaps;\n\n          for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n\n            if (overlaps(bodyA.bounds, bounds)) {\n              for (var j = partsAStart; j < partsALength; j++) {\n                var part = bodyA.parts[j];\n\n                if (overlaps(part.bounds, bounds)) {\n                  var collision = collides(part, body);\n\n                  if (collision) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {collision[]} Collisions\n         */\n\n\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n              rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n              rayX = (endPoint.x + startPoint.x) * 0.5,\n              rayY = (endPoint.y + startPoint.y) * 0.5,\n              ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n              collisions = Query.collides(ray, bodies);\n\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n\n          return result;\n        };\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.point = function (bodies, point) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n\n          return result;\n        };\n      })();\n      /***/\n\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n      var Runner = {};\n      module.exports = Runner;\n\n      var Events = __webpack_require__(4);\n\n      var Engine = __webpack_require__(18);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n\n          _requestAnimationFrame = function _requestAnimationFrame(callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = function _cancelAnimationFrame() {\n            clearTimeout(_frameTimeout);\n          };\n        }\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n\n\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n\n\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n\n          return runner;\n        };\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n\n\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n              correction = 1,\n              delta; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time; // optimistically filter delta over a few frames, to improve stability\n\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory); // limit delta\n\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta; // correction for delta\n\n            correction = delta / runner.delta; // update engine timing object\n\n            runner.delta = delta;\n          } // time correction for time scaling\n\n\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction; // fps counter\n\n          runner.frameCounter += 1;\n\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n\n          Events.trigger(runner, 'tick', event); // update\n\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event);\n          Events.trigger(runner, 'afterTick', event);\n        };\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n\n\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n\n\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n\n      })();\n      /***/\n\n    },\n    /* 28 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * This module has now been replaced by `Matter.Collision`.\n      *\n      * All usage should be migrated to `Matter.Collision`.\n      * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n      *\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      * @deprecated\n      */\n      var SAT = {};\n      module.exports = SAT;\n\n      var Collision = __webpack_require__(8);\n\n      var Common = __webpack_require__(0);\n\n      var deprecated = Common.deprecated;\n\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @deprecated replaced by Collision.collides\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB) {\n          return Collision.collides(bodyA, bodyB);\n        };\n\n        deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n      })();\n      /***/\n\n    },\n    /* 29 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n      var Svg = {};\n      module.exports = Svg;\n\n      var Bounds = __webpack_require__(1);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          } // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\n\n          var i,\n              il,\n              total,\n              point,\n              segment,\n              segments,\n              segmentsQueue,\n              lastSegment,\n              lastPoint,\n              segmentIndex,\n              points = [],\n              lx,\n              ly,\n              length = 0,\n              x = 0,\n              y = 0;\n          sampleLength = sampleLength || 15;\n\n          var addPoint = function addPoint(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1; // when the last point doesn't equal the current point add the current point\n\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n\n              var point = {\n                x: lx + px,\n                y: ly + py\n              }; // set last point\n\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n\n          var addSegmentPoint = function addSegmentPoint(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase(); // skip path ends\n\n            if (segType === 'Z') return; // map segment to x and y\n\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n\n              case 'H':\n                x = segment.x;\n                break;\n\n              case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n          }; // ensure path is absolute\n\n\n          Svg._svgPathToAbsolute(path); // get total length\n\n\n          total = path.getTotalLength(); // queue segments\n\n          segments = [];\n\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) {\n            segments.push(path.pathSegList.getItem(i));\n          }\n\n          segmentsQueue = segments.concat(); // sample through path\n\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex]; // new segment\n\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) {\n                addSegmentPoint(segmentsQueue.shift());\n              }\n\n              lastSegment = segment;\n            } // add points in between when curving\n            // TODO: adaptive sampling\n\n\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            } // increment by sample value\n\n\n            length += sampleLength;\n          } // add remaining segments not passed by sampling\n\n\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) {\n            addSegmentPoint(segmentsQueue[i]);\n          }\n\n          return points;\n        };\n\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n              y0,\n              x1,\n              y1,\n              x2,\n              y2,\n              segs = path.pathSegList,\n              x = 0,\n              y = 0,\n              len = segs.numberOfItems;\n\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 30 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * This module has now been replaced by `Matter.Composite`.\n      *\n      * All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n      * For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n      *\n      * The property `world.gravity` has been moved to `engine.gravity`.\n      *\n      * For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n      * Eventually this alias module will be marked as deprecated and then later removed in a future release.\n      *\n      * @class World\n      */\n      var World = {};\n      module.exports = World;\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * See above, aliases for back compatibility only\n         */\n        World.create = Composite.create;\n        World.add = Composite.add;\n        World.remove = Composite.remove;\n        World.clear = Composite.clear;\n        World.addComposite = Composite.addComposite;\n        World.addBody = Composite.addBody;\n        World.addConstraint = Composite.addConstraint;\n      })();\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});"],"sourceRoot":""}